const express = require("express");
const cookieSession = require("cookie-session");
const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const keys = require("./config/keys.js");
const mongoose = require("mongoose");
require("./models/User.js");

mongoose.connect(
  keys.mongoID,
  { useNewUrlParser: true }
);

const app = express();

// COOKIES - maxAge in ms 30 days, key is a password WE create - ecripts the cookie
app.use(
  cookieSession({
    maxAge: 30 * 24 * 60 * 60 * 1000,
    keys: [keys.cookieKey]
  })
);

// make passport use cookies to manage authentifacation
app.use(passport.initialize());
app.use(passport.session());

const User = mongoose.model("users");

passport.serializeUser((user, done) => {
  done(null, user.id); // id generated by Mongo
});

/* Convierte un ID en Usuario */
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback"
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({ googleID: profile.id }).then(ya_existe => {
        if (ya_existe) {
          done(null, ya_existe); // (error object, user)
        } else {
          new User({
            googleID: profile.id,
            name: profile.displayName,
            email: profile.emails[0].value
          })
            .save()
            .then(nuevo => done(null, nuevo));
        }
      });
    }
  )
);

app.get(
  "/auth/google",
  passport.authenticate("google", {
    scope: ["profile", "email"]
  })
);

app.get(
  "/auth/google/callback",
  passport.authenticate("google", { failureRedirect: "/login" }),
  function(req, res) {
    res.redirect("/");
  }
);

app.get("/logout", (request, response) => {
  request.logout();
  response.redirect("/");
});

app.get("/", (req, res) => {
  let ms = req.user === undefined ? "..." : req.user.name;
  res.send("Hello there " + ms);
});

const PORT = process.env.PORT || 5000;
app.listen(PORT);
